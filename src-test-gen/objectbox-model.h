// Code generated by ObjectBox; DO NOT EDIT.

#pragma once

#ifdef __cplusplus
#include <cstdbool>
#include <cstdint>
extern "C" {
#else
#include <stdbool.h>
#include <stdint.h>
#endif
#include "objectbox.h"

/// Initializes an ObjectBox model for all entities. 
/// The returned pointer may be NULL if the allocation failed. If the returned model is not NULL, you should check if   
/// any error occurred by calling obx_model_error_code() and/or obx_model_error_message(). If an error occurred, you're
/// responsible for freeing the resources by calling obx_model_free().
/// In case there was no error when setting the model up (i.e. obx_model_error_code() returned 0), you may configure 
/// OBX_store_options with the model by calling obx_opt_model() and subsequently opening a store with obx_store_open().
/// As soon as you call obx_store_open(), the model pointer is consumed and MUST NOT be freed manually.
static inline OBX_model* create_obx_model() {
    OBX_model* model = obx_model();
    if (!model) return NULL;
    
    obx_model_entity(model, "Bar", 1, 4238748172040711863);
    obx_model_property(model, "id", OBXPropertyType_Long, 1, 8899753625016606063);
    obx_model_property_flags(model, OBXPropertyFlags_ID);
    obx_model_property(model, "text", OBXPropertyType_String, 2, 8817565853152409613);
    obx_model_property(model, "fooId", OBXPropertyType_Long, 3, 8289563594193508940);
    obx_model_property_flags(model, OBXPropertyFlags_UNSIGNED);
    obx_model_entity_last_property_id(model, 3, 8289563594193508940);
    
    obx_model_entity(model, "Foo", 2, 3681320287511818591);
    obx_model_property(model, "id", OBXPropertyType_Long, 1, 1727382257942252770);
    obx_model_property_flags(model, OBXPropertyFlags_ID);
    obx_model_property(model, "text", OBXPropertyType_String, 2, 4580216775980296323);
    obx_model_entity_last_property_id(model, 2, 4580216775980296323);
    
    obx_model_entity(model, "Typeful", 3, 1679870369785090036);
    obx_model_property(model, "id", OBXPropertyType_Long, 1, 2357716816519717741);
    obx_model_property_flags(model, OBXPropertyFlags_ID);
    obx_model_property(model, "int", OBXPropertyType_Int, 2, 7787106383907421892);
    obx_model_property(model, "int8", OBXPropertyType_Byte, 3, 6626668244087952726);
    obx_model_property(model, "int16", OBXPropertyType_Short, 4, 2311989977658529302);
    obx_model_property(model, "int32", OBXPropertyType_Int, 5, 4449626101884999513);
    obx_model_property(model, "int64", OBXPropertyType_Long, 6, 6878925028725243346);
    obx_model_property(model, "uint", OBXPropertyType_Int, 7, 6993200619804101647);
    obx_model_property_flags(model, OBXPropertyFlags_UNSIGNED);
    obx_model_property(model, "uint8", OBXPropertyType_Byte, 8, 2723131825781050497);
    obx_model_property_flags(model, OBXPropertyFlags_UNSIGNED);
    obx_model_property(model, "uint16", OBXPropertyType_Short, 9, 1317433661165132830);
    obx_model_property_flags(model, OBXPropertyFlags_UNSIGNED);
    obx_model_property(model, "uint32", OBXPropertyType_Int, 10, 408806406362957694);
    obx_model_property_flags(model, OBXPropertyFlags_UNSIGNED);
    obx_model_property(model, "uint64", OBXPropertyType_Long, 11, 7911223144937033489);
    obx_model_property_flags(model, OBXPropertyFlags_UNSIGNED);
    obx_model_property(model, "bool", OBXPropertyType_Bool, 12, 5102252532293057263);
    obx_model_property(model, "string", OBXPropertyType_String, 13, 1210918154342857444);
    obx_model_property(model, "stringvector", OBXPropertyType_StringVector, 14, 2211039980163256942);
    obx_model_property(model, "byte", OBXPropertyType_Byte, 15, 8283195889592016512);
    obx_model_property(model, "ubyte", OBXPropertyType_Byte, 16, 2204379929217582908);
    obx_model_property_flags(model, OBXPropertyFlags_UNSIGNED);
    obx_model_property(model, "bytevector", OBXPropertyType_ByteVector, 17, 8640208185566146332);
    obx_model_property(model, "ubytevector", OBXPropertyType_ByteVector, 18, 7744667429633222761);
    obx_model_property(model, "float32", OBXPropertyType_Float, 19, 8432942845376480737);
    obx_model_property(model, "float64", OBXPropertyType_Double, 20, 8918992376217400744);
    obx_model_property(model, "float", OBXPropertyType_Float, 21, 1569262633269218436);
    obx_model_property(model, "double", OBXPropertyType_Double, 22, 1844447541348929615);
    obx_model_entity_last_property_id(model, 22, 1844447541348929615);
    
    obx_model_last_entity_id(model, 3, 1679870369785090036);
    return model; // NOTE: the returned model will contain error information if an error occurred.
}

#ifdef __cplusplus
}
#endif
